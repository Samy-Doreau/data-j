{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.10.11", "generated_at": "2025-10-03T16:10:32.820223Z", "invocation_id": "5a6fd105-09fb-45bf-8417-143f38b2ade8", "invocation_started_at": "2025-10-03T16:09:37.922472Z", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-03T16:09:39.418457Z", "completed_at": "2025-10-03T16:09:39.422529Z"}, {"name": "execute", "started_at": "2025-10-03T16:09:39.422927Z", "completed_at": "2025-10-03T16:09:39.583297Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.18915200233459473, "adapter_response": {"_message": "SELECT 45", "code": "SELECT", "rows_affected": 45}, "message": "SELECT 45", "failures": null, "unique_id": "model.highstreet_tenure.stg_filemap", "compiled": true, "compiled_code": "\n\nwith source as (\n    select * from \"highstreet\".\"public\".\"filename_mapping\"\n),\n\nextracted as (\n    select\n        id,\n        source_file,\n        loaded_at,\n        -- Extract fields from the JSON data column\n        data->>'file_name' as file_name,\n        data->>'table_name' as table_name,\n        data->>'valid_from' as valid_from,\n        data->>'valid_to' as valid_to\n    from source\n)\n\nselect * from extracted", "relation_name": "\"highstreet\".\"analytics_analytics\".\"stg_filemap\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-03T16:09:39.388707Z", "completed_at": "2025-10-03T16:09:39.394978Z"}, {"name": "execute", "started_at": "2025-10-03T16:09:39.395516Z", "completed_at": "2025-10-03T16:09:39.594268Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2092130184173584, "adapter_response": {"_message": "SELECT 432", "code": "SELECT", "rows_affected": 432}, "message": "SELECT 432", "failures": null, "unique_id": "model.highstreet_tenure.date_spine", "compiled": true, "compiled_code": "\n\nwith date_spine as (\n    select \n        ('1991-01-01'::date + interval '1 month' * (row_number() over (order by null) - 1))::date as date_month\n    from generate_series(1, 432)  -- 432 months from Jan 1991 to Dec 2026\n)\n\nselect \n    date_month,\n    to_char(date_month, 'YYYYMM') as year_month_key,\n    to_char(date_month, 'Mon-YYYY') as formatted_month_year,\n    extract(year from date_month) as year,\n    extract(month from date_month) as month,\n    to_char(date_month, 'Month') as month_name,\n    to_char(date_month, 'Mon') as month_abbr\nfrom date_spine\norder by date_month", "relation_name": "\"highstreet\".\"analytics_analytics\".\"date_spine\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-03T16:09:39.611125Z", "completed_at": "2025-10-03T16:09:39.613890Z"}, {"name": "execute", "started_at": "2025-10-03T16:09:39.614284Z", "completed_at": "2025-10-03T16:09:39.820325Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.21185517311096191, "adapter_response": {"_message": "SELECT 1307", "code": "SELECT", "rows_affected": 1307}, "message": "SELECT 1307", "failures": null, "unique_id": "model.highstreet_tenure.stg_new_businesses", "compiled": true, "compiled_code": "\n\nwith source as (\n    select * from \"highstreet\".\"public\".\"new_businesses\"\n),\n\nfilemap as (\n    select file_name, valid_from, valid_to from \"highstreet\".\"analytics_analytics\".\"stg_filemap\"\n    where table_name = 'new_businesses'\n),\n\nextracted as (\n    select\n        source.id,\n        source_file,\n        loaded_at,\n        -- Extract fields from the JSON data column\n        data->>'current_analysis_code_description' as current_analysis_code_description,\n        data->>'primary_liable_party_name' as primary_liable_party_name,\n        data->>'full_property_address' as full_property_address,\n        data->>'liable_responsibility_start_date' as liable_responsibility_start_date,\n        (data->>'current_rateable_value')::numeric as current_rateable_value,\n        data->>'property_reference_number' as property_reference_number,\n        filemap.valid_from as valid_from,\n        filemap.valid_to as valid_to\n    from source\n    left join filemap on source.source_file = filemap.file_name\n)\n\nselect * from extracted", "relation_name": "\"highstreet\".\"analytics_analytics\".\"stg_new_businesses\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-03T16:09:39.588577Z", "completed_at": "2025-10-03T16:09:39.596865Z"}, {"name": "execute", "started_at": "2025-10-03T16:09:39.598093Z", "completed_at": "2025-10-03T16:09:39.843339Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.25647902488708496, "adapter_response": {"_message": "SELECT 2683", "code": "SELECT", "rows_affected": 2683}, "message": "SELECT 2683", "failures": null, "unique_id": "model.highstreet_tenure.stg_accounts_closed", "compiled": true, "compiled_code": "\n\nwith source as (\n    select * from \"highstreet\".\"public\".\"accounts_closed\"\n),\n\nfilemap as (\n    select file_name, valid_from, valid_to from \"highstreet\".\"analytics_analytics\".\"stg_filemap\"\n    where table_name = 'accounts_closed'\n),\n\nextracted as (\n    select\n        source.id,\n        source.source_file,\n        source.loaded_at,\n        -- Extract fields from the JSON data column\n        data->>'account_start_date' as account_start_date,\n        data->>'account_end_date' as account_end_date,\n        (data->>'outstanding_debt')::numeric as outstanding_debt,\n        data->>'full_property_address' as full_property_address,\n        data->>'primary_liable_party_name' as primary_liable_party_name,\n        data->>'property_reference_number' as property_reference_number,\n        filemap.valid_from as valid_from,\n        filemap.valid_to as valid_to\n    from source\n    left join filemap on source.source_file = filemap.file_name\n)\n\nselect * from extracted", "relation_name": "\"highstreet\".\"analytics_analytics\".\"stg_accounts_closed\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-03T16:09:39.591132Z", "completed_at": "2025-10-03T16:09:39.597694Z"}, {"name": "execute", "started_at": "2025-10-03T16:09:39.601256Z", "completed_at": "2025-10-03T16:09:40.392712Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.8053939342498779, "adapter_response": {"_message": "SELECT 27009", "code": "SELECT", "rows_affected": 27009}, "message": "SELECT 27009", "failures": null, "unique_id": "model.highstreet_tenure.stg_accounts_no_relief", "compiled": true, "compiled_code": "\n\nwith source as (\n    select * from \"highstreet\".\"public\".\"accounts_no_relief\"\n),\n\nfilemap as (\n    select file_name, valid_from, valid_to from \"highstreet\".\"analytics_analytics\".\"stg_filemap\"\n    where table_name = 'accounts_no_relief'\n),\n\nextracted as (\n    select\n        source.id,\n        source_file,\n        loaded_at,\n        -- Extract fields from the JSON data column\n        data->>'billing_period' as billing_period,\n        data->>'full_property_address' as full_property_address,\n        (data->>'current_rateable_value')::numeric as current_rateable_value,\n        data->>'primary_liable_party_name' as primary_liable_party_name,\n        data->>'property_reference_number' as property_reference_number,\n        (data->>'a_c_summary_current_liability')::numeric as a_c_summary_current_liability,\n        data->>'liable_responsibility_start_date' as liable_responsibility_start_date,\n        filemap.valid_from as valid_from,\n        filemap.valid_to as valid_to\n    from source\n    left join filemap on source.source_file = filemap.file_name\n)\n\nselect * from extracted", "relation_name": "\"highstreet\".\"analytics_analytics\".\"stg_accounts_no_relief\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-03T16:09:39.594600Z", "completed_at": "2025-10-03T16:09:39.601013Z"}, {"name": "execute", "started_at": "2025-10-03T16:09:39.603850Z", "completed_at": "2025-10-03T16:09:40.407232Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.8194708824157715, "adapter_response": {"_message": "SELECT 28209", "code": "SELECT", "rows_affected": 28209}, "message": "SELECT 28209", "failures": null, "unique_id": "model.highstreet_tenure.stg_accounts_relief", "compiled": true, "compiled_code": "\n\nwith source as (\n    select * from \"highstreet\".\"public\".\"accounts_relief\"\n),\n\nfilemap as (\n    select file_name, valid_from, valid_to from \"highstreet\".\"analytics_analytics\".\"stg_filemap\"\n    where table_name = 'accounts_with_relief'\n),\n\nextracted as (\n    select\n        source.id,\n        source_file,\n        loaded_at,\n        -- Extract fields from the JSON data column\n        data->>'current_relief_type' as current_relief_type,\n        data->>'full_property_address' as full_property_address,\n        (data->>'current_rateable_value')::numeric as current_rateable_value,\n        data->>'primary_liable_party_name' as primary_liable_party_name,\n        data->>'property_reference_number' as property_reference_number,\n        data->>'current_relief_award_start_date' as current_relief_award_start_date,\n        data->>'current_relief_type_description' as current_relief_type_description,\n        data->>'liable_responsibility_start_date' as liable_responsibility_start_date,\n        (data->>'current_relief_award_perc_awarded')::numeric as current_relief_award_perc_awarded,\n        filemap.valid_from as valid_from,\n        filemap.valid_to as valid_to\n    from source\n    left join filemap on source.source_file = filemap.file_name\n)\n\nselect * from extracted", "relation_name": "\"highstreet\".\"analytics_analytics\".\"stg_accounts_relief\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-03T16:09:40.422199Z", "completed_at": "2025-10-03T16:09:40.429820Z"}, {"name": "execute", "started_at": "2025-10-03T16:09:40.433657Z", "completed_at": "2025-10-03T16:09:40.865916Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.45385193824768066, "adapter_response": {"_message": "SELECT 9083", "code": "SELECT", "rows_affected": 9083}, "message": "SELECT 9083", "failures": null, "unique_id": "model.highstreet_tenure.properties", "compiled": true, "compiled_code": "\n\nwith properties_new as (\n    select distinct full_property_address as property_address, property_reference_number as property_id from \"highstreet\".\"analytics_analytics\".\"stg_new_businesses\"\n\n),\n\nproperties_accounts_no_relief as (\n    select distinct full_property_address as property_address, property_reference_number as property_id from \"highstreet\".\"analytics_analytics\".\"stg_accounts_no_relief\"\n\n),\n\nproperties_accounts_relief as (\n    select distinct full_property_address as property_address, property_reference_number as property_id from \"highstreet\".\"analytics_analytics\".\"stg_accounts_relief\"\n\n),\n\nproperties_accounts_closed as (\n    select distinct full_property_address as property_address, property_reference_number as property_id from \"highstreet\".\"analytics_analytics\".\"stg_accounts_closed\"\n\n),\n\ncombined_properties as (\n\n    select * from properties_new\n    union \n    select * from properties_accounts_no_relief\n    union \n    select * from properties_accounts_relief\n    union \n    select * from properties_accounts_closed\n)\n\nselect distinct property_id, property_address from combined_properties", "relation_name": "\"highstreet\".\"analytics_analytics\".\"properties\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-03T16:09:40.870194Z", "completed_at": "2025-10-03T16:09:40.872498Z"}, {"name": "execute", "started_at": "2025-10-03T16:09:40.872734Z", "completed_at": "2025-10-03T16:09:41.111363Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.24204015731811523, "adapter_response": {"_message": "SELECT 4945", "code": "SELECT", "rows_affected": 4945}, "message": "SELECT 4945", "failures": null, "unique_id": "model.highstreet_tenure.addresses", "compiled": true, "compiled_code": "\n\nwith properties as (\n    select * from \"highstreet\".\"analytics_analytics\".\"properties\"\n)\n\nselect distinct property_address from properties", "relation_name": "\"highstreet\".\"analytics_analytics\".\"addresses\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-03T16:09:40.415851Z", "completed_at": "2025-10-03T16:09:40.424383Z"}, {"name": "execute", "started_at": "2025-10-03T16:09:40.425082Z", "completed_at": "2025-10-03T16:09:41.117820Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.707056999206543, "adapter_response": {"_message": "SELECT 9440", "code": "SELECT", "rows_affected": 9440}, "message": "SELECT 9440", "failures": null, "unique_id": "model.highstreet_tenure.business_addresses", "compiled": true, "compiled_code": "\n\nwith business_addresses_new as (\n    select distinct full_property_address as business_address, primary_liable_party_name as business_name from \"highstreet\".\"analytics_analytics\".\"stg_new_businesses\"\n\n),\n\nbusiness_addresses_accounts_no_relief as (\n    select distinct full_property_address as business_address, primary_liable_party_name as business_name from \"highstreet\".\"analytics_analytics\".\"stg_accounts_no_relief\"\n\n),\n\nbusiness_addresses_accounts_relief as (\n    select distinct full_property_address as business_address, primary_liable_party_name as business_name from \"highstreet\".\"analytics_analytics\".\"stg_accounts_relief\"\n\n),\n\nbusiness_addresses_accounts_closed as (\n    select distinct full_property_address as business_address, primary_liable_party_name as business_name from \"highstreet\".\"analytics_analytics\".\"stg_accounts_closed\"\n\n),\n\ncombined_business_addresses as (\n\n    select * from business_addresses_new\n    union \n    select * from business_addresses_accounts_no_relief\n    union \n    select * from business_addresses_accounts_relief\n    union \n    select * from business_addresses_accounts_closed\n)\n\nselect distinct \n     \n    regexp_replace(\n        lower(\n            trim(\n                regexp_replace(                   -- collapse multiple spaces\n                    regexp_replace(               -- remove non-alphanumeric (keep space)\n                        regexp_replace(           -- replace \"&\" with \"and\"\n                            business_name,\n                            '&', 'and', 'gi'\n                        ),\n                        '[^a-zA-Z0-9 ]', '', 'g'\n                    ),\n                    '\\\\s+', ' ', 'g'\n                )\n            )\n        ),\n        '^ta ', '', 'g'\n    )\n as business_name,\n    business_address,\n    split_part(business_address, ',', -1) as postcode\nfrom combined_business_addresses\n-- where lower(business_address) like '%st peters street%' \n-- or lower(business_address) like '%market place%'\n-- or lower(business_address) like '%french row%'\n-- or lower(business_address) like '%checker st%'\n-- or lower(business_address) like '%george st%'\n-- or lower(business_address) like '%holywell hill%'\n-- or lower(business_address) like '%london r%'\n-- or lower(business_address) like '%victoria st%'\n-- or lower(business_address) like '%hatfield r%'", "relation_name": "\"highstreet\".\"analytics_analytics\".\"business_addresses\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-03T16:09:41.120777Z", "completed_at": "2025-10-03T16:09:41.124935Z"}, {"name": "execute", "started_at": "2025-10-03T16:09:41.125178Z", "completed_at": "2025-10-03T16:09:41.248124Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.12833404541015625, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.highstreet_tenure.addresses_with_most_tenants", "compiled": true, "compiled_code": "with business_addresses as (\n    select * from \"highstreet\".\"analytics_analytics\".\"business_addresses\"\n)\n\nselect \n    business_address,\n    postcode,\n    left(postcode, 4) as postcode_three_letter,\n    count(distinct business_name) as tenant_count\nfrom business_addresses\ngroup by 1, 2", "relation_name": "\"highstreet\".\"analytics_analytics\".\"addresses_with_most_tenants\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-03T16:09:40.412779Z", "completed_at": "2025-10-03T16:09:40.424711Z"}, {"name": "execute", "started_at": "2025-10-03T16:09:40.427501Z", "completed_at": "2025-10-03T16:09:43.926881Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 3.5164148807525635, "adapter_response": {"_message": "SELECT 56080", "code": "SELECT", "rows_affected": 56080}, "message": "SELECT 56080", "failures": null, "unique_id": "model.highstreet_tenure.business_address_timeline", "compiled": true, "compiled_code": "\n\nwith account_ends as (\n    select distinct\n        primary_liable_party_name as business_name,\n        full_property_address as business_address,\n        account_start_date,\n        account_end_date,\n        account_end_date as event_date,\n        'account_end' as event_type,\n        property_reference_number as property_id,\n        source_file as source_file_name\n    from \"highstreet\".\"analytics_analytics\".\"stg_accounts_closed\"\n),\n\naccounts_new as (\n    select distinct\n        primary_liable_party_name as business_name, \n        full_property_address as business_address,\n        liable_responsibility_start_date as account_start_date,\n        NULL as account_end_date,\n        liable_responsibility_start_date as event_date,\n        'account_start' as event_type,\n        property_reference_number as property_id,\n        source_file as source_file_name\n    from \"highstreet\".\"analytics_analytics\".\"stg_new_businesses\"\n),\n\naccounts_no_relief_active as (\n    select distinct\n        primary_liable_party_name as business_name, \n        full_property_address as business_address,\n        liable_responsibility_start_date as account_start_date,\n        NULL as account_end_date,\n        valid_to as event_date, -- Event date derived from file metadata (filename)\n        'account_active' as event_type,\n        property_reference_number as property_id,\n        source_file as source_file_name\n    from \"highstreet\".\"analytics_analytics\".\"stg_accounts_no_relief\"\n),\n\naccounts_relief_active as (\n    select distinct\n        primary_liable_party_name as business_name, \n        full_property_address as business_address,\n        liable_responsibility_start_date as account_start_date,\n        NULL as account_end_date,\n        valid_to as event_date, \n        'account_active' as event_type,\n        property_reference_number as property_id,\n        source_file as source_file_name\n    from \"highstreet\".\"analytics_analytics\".\"stg_accounts_relief\"\n),\n\ncombined_accounts as (\n    select distinct business_name, business_address, event_date, event_type, source_file_name from account_ends\n    union \n    select distinct business_name, business_address, event_date, event_type, source_file_name from accounts_new\n    union all\n    select distinct business_name, business_address, event_date, event_type, source_file_name from accounts_no_relief_active\n    union all\n    select distinct business_name, business_address, event_date, event_type, source_file_name from accounts_relief_active\n)\n\nselect \n    \n    regexp_replace(\n        lower(\n            trim(\n                regexp_replace(                   -- collapse multiple spaces\n                    regexp_replace(               -- remove non-alphanumeric (keep space)\n                        regexp_replace(           -- replace \"&\" with \"and\"\n                            business_name,\n                            '&', 'and', 'gi'\n                        ),\n                        '[^a-zA-Z0-9 ]', '', 'g'\n                    ),\n                    '\\\\s+', ' ', 'g'\n                )\n            )\n        ),\n        '^ta ', '', 'g'\n    )\n as business_name,\n    business_address, event_date, event_type, source_file_name,\n    concat('https://www.stalbans.gov.uk/sites/default/files/attachments/', source_file_name) as source_file_url,\n    to_char(event_date::date, 'YYYYMM')::int as year_month_key \nfrom combined_accounts order by business_name, business_address, event_date", "relation_name": "\"highstreet\".\"analytics_analytics\".\"business_address_timeline\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-03T16:09:43.929693Z", "completed_at": "2025-10-03T16:09:43.931894Z"}, {"name": "execute", "started_at": "2025-10-03T16:09:43.932124Z", "completed_at": "2025-10-03T16:09:44.654863Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.7265689373016357, "adapter_response": {"_message": "SELECT 7627", "code": "SELECT", "rows_affected": 7627}, "message": "SELECT 7627", "failures": null, "unique_id": "model.highstreet_tenure.business_address_tenures", "compiled": true, "compiled_code": "\n\nwith business_address_timeline as (\n    select * from \"highstreet\".\"analytics_analytics\".\"business_address_timeline\" where lower(business_name) not like '%ratepayer%'\n),\n\n-- Normalise names\nbusiness_address_timeline_normalised as (\n    select\n        business_address,\n        event_date,\n        business_name\n       \n    from business_address_timeline\n),\n\nbusiness_address_tenures as (\n    select \n        business_name,       \n        business_address,\n        min(event_date) as tenure_start_date,\n        max(event_date) as tenure_end_date\n    from business_address_timeline_normalised\n    group by 1,2\n)\n\nselect \n    business_name,\n    business_address,\n    tenure_start_date,\n    case \n        when tenure_end_date = tenure_start_date then null \n        else tenure_end_date \n    end as tenure_end_date,\n    round((tenure_end_date::date - tenure_start_date::date)/365.25,1) as tenure_duration_years\nfrom business_address_tenures", "relation_name": "\"highstreet\".\"analytics_analytics\".\"business_address_tenures\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-03T16:09:40.419007Z", "completed_at": "2025-10-03T16:09:40.429554Z"}, {"name": "execute", "started_at": "2025-10-03T16:09:40.430242Z", "completed_at": "2025-10-03T16:10:32.741400Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 52.33010911941528, "adapter_response": {"_message": "SELECT 6223", "code": "SELECT", "rows_affected": 6223}, "message": "SELECT 6223", "failures": null, "unique_id": "model.highstreet_tenure.businesses", "compiled": true, "compiled_code": "\n\nwith businesses_new as (\n    select distinct primary_liable_party_name as business_name from \"highstreet\".\"analytics_analytics\".\"stg_new_businesses\"\n\n),\n\nbusinesses_accounts_closed as (\n    select distinct primary_liable_party_name as business_name from \"highstreet\".\"analytics_analytics\".\"stg_accounts_closed\"\n\n),\n\nbusinesses_accounts_no_relief as (\n    select distinct primary_liable_party_name as business_name from \"highstreet\".\"analytics_analytics\".\"stg_accounts_no_relief\"\n\n),\n\nbusinesses_accounts_relief as (\n    select distinct primary_liable_party_name as business_name from \"highstreet\".\"analytics_analytics\".\"stg_accounts_relief\"\n\n),\n\n\ncombined_businesses as (\n\n    select business_name from businesses_new\n    union \n    select business_name from businesses_accounts_closed\n    union \n    select business_name from businesses_accounts_no_relief\n    union \n    select business_name from businesses_accounts_relief\n),\n\nnormalized as (\n    select \n        \n    regexp_replace(\n        lower(\n            trim(\n                regexp_replace(                   -- collapse multiple spaces\n                    regexp_replace(               -- remove non-alphanumeric (keep space)\n                        regexp_replace(           -- replace \"&\" with \"and\"\n                            business_name,\n                            '&', 'and', 'gi'\n                        ),\n                        '[^a-zA-Z0-9 ]', '', 'g'\n                    ),\n                    '\\\\s+', ' ', 'g'\n                )\n            )\n        ),\n        '^ta ', '', 'g'\n    )\n as name_norm,\n        business_name\n    from combined_businesses\n)\n\nselect  \nbusiness_name,\n case\n    -- Supermarkets & large grocery\n    when name_norm ~* '(tesco|sainsbury|asda|morrisons|waitrose|iceland|aldi|lidl|co\\s*op|cooperative|marks and spencer|m\\s*&?\\s*s|mands\\s*food|mands)' then 'Supermarket'\n\n    -- Convenience, newsagents & off-licence chains\n    when name_norm ~* '(off\\s*licen|convenience|corner shop|newsagent|costcutter|spar|londis|premier|best one|one stop|nisa|mace|bargain booze)' then 'Convenience & newsagent'\n\n    -- Pharmacy (before health & beauty to prioritise Boots, etc.)\n    when name_norm ~* '(pharmacy|chemist|boots(?!.*optician)|lloyds\\s*pharmacy|well\\s*pharmacy|numark)' then 'Pharmacy'\n\n    -- Opticians\n    when name_norm ~* '(optician|specsavers|vision express|scrivens|boots\\s*optician)' then 'Optician'\n\n    -- Hair & beauty split\n    when name_norm ~* '(barber|barbers|barber shop)' then 'Barber'\n    when name_norm ~* '(nail|beauty|spa|tanning|aesthetics|lash|brow)' then 'Beauty salon'\n    when name_norm ~* '(hair|hairdresser|hairdressing|salon)' then 'Hair salon'\n\n    -- Coffee shops & cafes\n    when name_norm ~* '(costa|starbucks|caffe\\s*nero|nero|pret\\s*a\\s*manger|tim\\s*hortons|coffee|espresso|cafe|tea\\s*room|tearoom|bistro|brasserie)' then 'Cafe / coffee shop'\n\n    -- Bakeries & sandwich\n    when name_norm ~* '(bakery|patisserie|baguette|greggs|cake shop|cupcake|patisserie valerie)' then 'Bakery & sandwich'\n\n    -- Fast food & national QSR chains\n    when name_norm ~* '(mcdonald|kfc|burger\\s*king|subway|domino|pizza\\s*hut|papa\\s*john|five\\s*guys|shake\\s*shack|chicken\\s*cottage|morleys|favorite\\s*chicken)' then 'Fast food / takeaway'\n\n    -- Fish & chips and generic takeaways\n    when name_norm ~* '(fish\\s*(and|\\&)\\s*chips|chippy|chip shop|kebab|peri\\s*peri|fried\\s*chicken|takeaway|noodle|ramen|sushi|shawarma|doner|curry|tandoori|balti|pizzeria)' then 'Fast food / takeaway'\n\n    -- Restaurants (casual & full service)\n    when name_norm ~* '(restaurant|ristorante|trattoria|grill|steakhouse|thai|indian|chinese|italian|mexican|tapas|lebanese|turkish|korean|brazilian|argentinian|ethiopian)' then 'Restaurant'\n\n    -- Pubs, bars & nightlife\n    when name_norm ~* '(pub|tavern|bar|inn|wetherspoon|wetherspoons|jd\\s*wetherspoon|taproom|ale\\s*house|brewery|nightclub|club\\b|lounge)' then 'Pub / bar'\n\n    -- Banks & building societies\n    when name_norm ~* '(bank|lloyds|hsbc|natwest|barclays|santander|tsb|halifax|nationwide|virgin\\s*money|metro\\s*bank|yorkshire\\s*bank|clydesdale\\s*bank)' then 'Bank / building society'\n\n    -- Post office\n    when name_norm ~* '(post\\s*office|postoffice)' then 'Post office'\n\n    -- Estate & letting agents\n    when name_norm ~* '(estate\\s*agent|lettings|letting\\s*agent|property\\s*agent|savills|foxtons|haart|winkworth|connells|leaders|hunters|countrywide|purplebricks)' then 'Estate & letting agent'\n\n    -- Charity shops\n    when name_norm ~* '(oxfam|barnardo|british\\s*heart\\s*foundation|cancer\\s*research|sue\\s*ryder|mind\\b|salvation\\s*army|ymca|age\\s*uk|shaw\\s*trust)' then 'Charity shop'\n\n    -- Betting shops\n    when name_norm ~* '(ladbrokes|william\\s*hill|betfred|coral|paddy\\s*power|bookmaker|betting\\s*shop)' then 'Betting shop'\n\n    -- Electronics & mobile\n    when name_norm ~* '(currys|pc\\s*world|carphone|ee\\b|vodafone|o2\\b|three\\b|3\\s*store|apple\\s*store|samsung\\s*store|fone|phone\\s*shop)' then 'Electronics & mobile'\n\n    -- Computers / tech repair\n    when name_norm ~* '(computer|laptop|it\\s*service|tech\\s*repair|phone\\s*repair|ifix|repair\\s*centre)' then 'Repair services'\n\n    -- Jewellers\n    when name_norm ~* '(jewell?er|goldsmith|pandora|ernest\\s*jones|h\\s*samuel|beaverbrooks)' then 'Jeweller'\n\n    -- Clothing & fashion\n    when name_norm ~* '(primark|h\\s*&?\\s*m\\b|next\\b|zara|uniqlo|river\\s*island|new\\s*look|topshop|burton|dorothy\\s*perkins|jack\\s*wills|fat\\s*face|white\\s*stuff|joules|superdry|all\\s*saints|tk\\s*maxx|tkmaxx)' then 'Clothing & fashion'\n\n    -- Shoes & footwear\n    when name_norm ~* '(clarks|schuh|foot\\s*locker|deichmann|office\\s*shoes|kurt\\s*geiger|timberland)' then 'Shoes & footwear'\n\n    -- Sports & outdoors\n    when name_norm ~* '(sports\\s*direct|jd\\s*sports|decathlon|go\\s*outdoors)' then 'Sports & outdoors'\n\n    -- Books & stationery\n    when name_norm ~* '(wh\\s*smith|whsmith|waterstones|bookshop|book\\s*store|ryman|paperchase|the\\s*works|stationery)' then 'Books & stationery'\n\n    -- Home, DIY & hardware\n    when name_norm ~* '(wilko|wilkinson|b\\s*&?\\s*m\\b|home\\s*bargains|the\\s*range|b\\s*&?\\s*q\\b|wickes|screwfix|toolstation|homebase|ikea|robert\\s*dyas|hardware|ironmonger)' then 'Home & DIY'\n\n    -- Furniture & homeware\n    when name_norm ~* '(furniture|sofa|bensons\\s*for\\s*beds|dfs\\b|dreams\\b|wren\\s*kitchen|magnet\\s*kitchen|bathstore)' then 'Furniture & homeware'\n\n    -- Garden & florists\n    when name_norm ~* '(garden\\s*centre|gardencentre|garden\\b|florist|flowers|bloom|interflora)' then 'Garden & florist'\n\n    -- Pets & vets\n    when name_norm ~* '(pets\\s*at\\s*home|pet\\s*shop|aquatic|veterinar|\\bvet\\b|groomer|grooming|kennel|cattery)' then 'Pets & vets'\n\n    -- Automotive services\n    when name_norm ~* '(garage\\b|mot\\b|tyres?|autocent(re|er)|halfords|kwik\\s*fit|kwikfit|ats\\s*euromaster|euro\\s*car\\s*parts|car\\s*wash|valet|valeting|dealership|showroom)' then 'Automotive services'\n\n    -- Travel agents\n    when name_norm ~* '(travel\\s*agent|tui\\b|thomas\\s*cook|trailfinders|flight\\s*centre|hays\\s*travel)' then 'Travel agent'\n\n    -- Dry cleaning & laundry\n    when name_norm ~* '(dry\\s*clean|launderette|laundrette|laundry|wash\\s*and\\s*fold|ironing)' then 'Dry cleaning & laundry'\n\n    -- Tailor & alterations\n    when name_norm ~* '(tailor|alteration|seamstress|bespoke\\s*suit)' then 'Tailor & alterations'\n\n    -- Key cutting, shoe repair & photo\n    when name_norm ~* '(timpson|shoe\\s*repair|key\\s*cut|snappy\\s*snaps|photo\\s*centre|photograph)' then 'Key cutting & photo'\n\n    -- Education & childcare\n    when name_norm ~* '(nursery|pre\\s*school|preschool|childcare|day\\s*nursery|montessori|tuition|tutor|kumon)' then 'Education & childcare'\n\n    -- Medical & dental\n    when name_norm ~* '(dental|dentist|orthodontist|gp\\s*surgery|medical\\s*centre|clinic|physio|physiotherapy|chiropractic|osteopath|podiatr|dermatolog)' then 'Medical & dental'\n\n    -- Hotels & accommodation\n    when name_norm ~* '(hotel|guest\\s*house|bed\\s*and\\s*breakfast|b\\s*&?\\s*b\\b|bnb\\b|hostel|premier\\s*inn|travelodge|ibis|marriott|hilton|holiday\\s*inn)' then 'Hotel & accommodation'\n\n    -- Leisure & entertainment\n    when name_norm ~* '(cinema|theatre|theater|bowling|escape\\s*room|arcade|bingo)' then 'Leisure & entertainment'\n\n    else 'Unclassified'\n end as business_category\nfrom normalized", "relation_name": "\"highstreet\".\"analytics_analytics\".\"businesses\"", "batch_results": null}], "elapsed_time": 54.25548815727234, "args": {"log_level": "info", "use_colors_file": true, "use_colors": true, "log_format_file": "debug", "partial_parse": true, "introspect": true, "project_dir": "/Users/samydoreau/data-j/highstreet-tenure", "strict_mode": false, "show_all_deprecations": false, "show_resource_report": false, "exclude": [], "printer_width": 80, "version_check": true, "require_explicit_package_overrides_for_builtin_materializations": true, "use_fast_test_edges": false, "require_resource_names_without_spaces": true, "profiles_dir": "/Users/samydoreau/data-j/highstreet-tenure", "favor_state": false, "indirect_selection": "eager", "require_all_warnings_handled_by_warn_error": false, "log_file_max_bytes": 10485760, "skip_nodes_if_on_run_start_fails": false, "require_yaml_configuration_for_mf_time_spines": false, "source_freshness_run_project_hooks": true, "select": [], "upload_to_artifacts_ingest_api": false, "state_modified_compare_vars": false, "validate_macro_args": false, "which": "run", "log_level_file": "debug", "print": true, "static_parser": true, "partial_parse_file_diff": true, "vars": {}, "log_path": "/Users/samydoreau/data-j/highstreet-tenure/logs", "warn_error_options": {"error": [], "warn": [], "silence": []}, "require_batched_execution_for_custom_microbatch_strategy": false, "defer": false, "require_nested_cumulative_type_params": false, "require_generic_test_arguments_property": true, "send_anonymous_usage_stats": true, "empty": false, "invocation_command": "dbt run", "log_format": "default", "cache_selected_only": false, "write_json": true, "state_modified_compare_more_unrendered_values": false, "macro_debugging": false, "populate_cache": true, "quiet": false}}